This is the unofficial list of commands and syntax recognized by Hexels.  Well I guess it
*is* official, since it's from Hex-Ray, but it's not exhaustive and not guaranteed to be
100% accurate.

__________________________________________
Syntax guide
#comments start with #
//or with //

for the following guide (the next 15ish lines)....
A parameter (<param>) should be replaced with a number or text string
A flag ([flag]) should be used as is, and not replaced with another value

<param> indicates a required parameter
<"param"> indicates a parameter should be in quotes.
(<param>) indicate an optional parameter
[flag] indicates an optional flag.
	Example:  ExportImage <"filename"> <zoom> [noAA]
	you can have in your script:
			ExportImage "out.png" 10
	or
			ExportImage "out.png" 10 noAA

Finally,
[flag1, flag2, flag3] indicates mutually exclusive flags


__________________________________________
File Commands:

CD <directory>
#set working directory.  This is here Hexels will look for files
#requested by the script.  Can be relative or absolute.
#The working directory resets to default when scripts are done running
#Default being the directory last used to load or save an HXL file

NewFile

ImportImage <"filename"> [OneToOne, Scaled, or Sampled] <scale>

Open <"filename">  

PromptForOpenFile <("Message")>
PromptForSaveFile <("Message")>
PromptForDirectory <("Message")>
#Open a file dialog to select an input (or output) file
#the filename can be accessed with $SELECTED_FILE
#
#	promptForFile "Select a Hexels file to export"
#   exportImage $NameAsPNG($SELECTED_FILE)
#

ExportImage (or Export) <"filename"> <zoom> [NoAA]


PromptForExportSettings
#opens the export dialog, where you can preview your export and choose a zoom, etc.
#this can then be accessed with the variable/macro $SELECTED_EXPORT_SETTINGS
#if you use SELECTED_EXPORT_SETTINGS without calling PromptForExportSettings,
#it'll prompt you the first time anyway, which is nice

SetOverwrite
#makes it so the script will NOT ask before overwriting a file it used as input
#for example, importing a photo called image.png as Hexels, then exporting it
#as image.png will ask you to confirm overwriting the source file
#if you call this function, the overwrite will happen without asking

DontSave
#marks the current document as not having unsaved changes
#useful for scripts that create new files or import images

CanvasSize <width> <height>

#set "Hexel Opacity", found under the Document Tab
HexelOpacity <a:0-100>

Drawing Commands:

Color (or SetColor) <r:0-255> <g:0-255> <b:0-255> (<a:0-100>)

#grabs the actual (not apparent) color of the hexel at these hexel coordinates on the current layer
#color is set as the foreground color and also stored in the $RESULT variable.
SampleColor <x> <y>



BrushSize <size>

#stroke:  coordinates are hexel indices, not canvas coordinates
Stroke (or BrushSelect, BrushDeselect, BrushAddSelect, Erase)  <x1> <y1> (<x2> <y2>)

Fill (or MagicWand, MagicWandDeselect, MagicWandAddSelect) <x> <y>


Undo

Redo


#directly sets a hexel's color, disregards brush size, replaces color + opacity, ignores undo and selection, uses current layer
#useful for a script that needs to precisely fill a lot of hexels
SetDirect <x> <y> <r> <g> <b> (<a>) (<texture>)

#same as above, but takes opacity into account and blends with what's already there
BlendDirect <x> <y> <r> <g> <b> (<a>) (<texture>)

#call this when you want the image to update if you're using SetDirect
Refresh

Nudge (or MoveSelection) <xAmount> <yAmount>

#flip selection (or entire canvas) horizontally
FlipSelectionH

#flip selection (or entire canvas) vertically
FlipSelectionV

GlowAmount <amount>

SelectAll

SelectNone


Layer Commands:

NewLayer <"layer name">

NewLayerFromSelection <"layer name">"

SetLayer <"layer name" or layerNumber starting at 1>

MoveLayer <LayerNumber starting at 1> <new position, starting at 1>

DeleteLayer <"layer name" or layerNumber starting at 1>

SetLayerOpacity (or LayerOpacity) <opacity: 0-1>

SetLayer <layer name or number.  Numbers start at 1>

HideLayer (or ShowLayer) <layer name or number>

HideAllLayers (ShowAllLayers)

MergeLayerDown

DuplicateLayer

#these deal directly with cel numbers and are primarily used internally for speedpaint generation and bug replication (:
RemoveCel <number starting at 1>
SetCel <number starting at 1>
MoveCel <from: number starting at 1> <to: number starting at 1>
DuplicateCel

#sets $RETURNVALUE to the name of the specified layer
GetLayerName <layer number starting at 1>

For render-to-canvas-background

RenderToCanvasBackground <zoom> [noAA]

#removes a canvas background image
ClearCanvasBackground

Scripted Animation (different from the GUI animation!)
RenderAnimationFrame <zoom> [noAA]
ClearAnimationFrames
SaveAnimation <filename--PNG or GIF> [<frame rate for GIF or row count for spritesheet>]


Loops:

There are currently four types of for loops
Ranged:  for $<variablename> <first value> <lastvalue> (<interval, defaults to 1>)
List:  for $<variablename> in <value> <value> <value> etc...
Directory:  for $<variablename> inDir <"absolute or relative path">
Layers:  for $<variablename> eachLayer
For loops are terminated with "end", but they can be nested

Examples
==========

#draw a horizontal dotted line of red Hexels

setColor 255 0 0
for $x 5 15
	stroke $x 5
end

===================

#draw several horizontal dotted line of orange Hexels with a nested loop

setColor 255 127 0
for $y 4 12 2
	for $x 5 15
		stroke $x $y
	end
end

===================


#draw hexels at specific places along a horizontal line

setColor 0 255 0
for $x in 5 10 20 40
	stroke $x 6
end

==========

#import image files from the "input" directory, and export them with the same name, in the "export" directory
for $file inDir "./input"
	importImage $file sampled 0.05

	cd "export"
	exportimage $file 20
	cd ..
end

============

#export each layer of a file individually
open "Numbers.hxl"
for $i eachLayer
	hideAllLayers
	showLayer $i
#note the nested macros
	exportimage $NameAsPNG($SequencedName($INPUT_FILE)) 100
	showAllLayers
end

==============
#as another trick, we can use quotes to squeeze two or three numbers into our loop variable
#draw hexels at specific places on the canvas

setColor 0 0 255
for $place in "5 5" "10 5" "7 7"
	stroke $place
end
===================




Control Commands:


setDelay <seconds>
Change the time between script command execution

wait <seconds>
Pause script execution for this much.  Won't have any effect if it's less than the current delay

stop
#Stop the current script and any script that called it

return
#Ignore all lines in a script file after this one (if this script was called by another, the other one will keep going)


runScript <"filename"> <(arg1, arg2, ....)>
#call another script.  You can pass it arguments, which can be referened with $1, $2, $3, etc



Shape Mode Commands:

SetRenderMode <"RenderModeName">

RequireRenderMode <"RenderModeNameAsDisplayedInTheMenu">"
#Politely aborts a script if the required shape mode is not active.

Variables

Custom variables:
#name must have a dollar sign in front of it
#the script replaces variables with their values using a basic string replacement, so
#if you have a loop variable $i and create a new variable called $imageName, you'll run into syntax errors
#the exception to this is the $name argument.  it is not expanded, thus allowing you to reassign a variable
setvar $<name> <value>

script line return values
#some script commands (such as CompareImages) return a value.  This value is always turned into a string and stored as $RESULT for access
$RESULT


Expansion macros


$NameAsPNG(name)
#replaces the extension of a file with .png


$SequencedName(name) 
#inserts a number at the end of a file name (before its extension). Starting at 1, this number is incremented each time the function is called

$AppendToName(<"name"> <"suffix">)
#inserts the suffix text as part of the file name before the extension
#so, basically a string concatenation that takes file extension into account

